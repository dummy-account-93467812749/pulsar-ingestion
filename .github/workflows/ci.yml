name: CI Build and Test

on:
  push:
    branches: [ "main", "develop" ] # Adjust if your primary branches are different
  pull_request:
    branches: [ "main", "develop" ] # Adjust if your primary branches are different

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          # Include libs.versions.toml and all build.gradle.kts files in the key
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*.kts', '**/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build, Check, Test, and Package
        run: ./gradlew --no-daemon clean build shadowJar
        # The 'build' task triggers 'check', which by default includes 'test'.
        # Convention plugins should ensure detekt, ktlintCheck, and integrationTest are part of 'check'.
        # 'shadowJar' builds the fat JARs for application modules.

      - name: Upload Fat JARs
        uses: actions/upload-artifact@v4
        with:
          name: deployable-jars
          # Path should point to the output directory configured in kotlin-application.gradle.kts
          # which is project.rootProject.layout.buildDirectory.dir("deployable_jars")
          # This resolves to 'build/deployable_jars' at the root project level.
          path: build/deployable_jars/*.jar
          if-no-files-found: error # Fails the workflow if no JARs are found
          # retention-days: 7 # Optional: how long to keep the artifacts
```
