apiVersion: batch/v1
kind: Job
metadata:
  name: pulsar-register-pipeline-{{ $.Release.Name }}
  namespace: {{ $.Values.namespace }}
  labels:
    app: pulsar-pipeline-registrar
    tenant: {{ $.Values.tenant }}
    release: {{ $.Release.Name }}
spec:
  template:
    metadata:
      labels:
        app: pulsar-pipeline-registrar
        tenant: {{ $.Values.tenant }}
        release: {{ $.Release.Name }}
    spec:
      restartPolicy: Never
      # Consider adding a service account if RBAC is enabled
      # serviceAccountName: pulsar-admin-sa
      containers:
      - name: registration-runner
        image: streamnative/pulsar-admin-utils:latest # Or your preferred image with pulsar-admin
        command: ["/bin/sh", "-c"]
        args:
          - |
            set -ex; # Exit on error and print commands

            echo "Starting pipeline registration for tenant {{ $.Values.tenant }} and namespace {{ $.Values.namespace }}";

            {{- range $name, $func := .Values.functions }}
            echo "Registering function: {{ $name }}";
            pulsar-admin functions create \
              --tenant {{ $.Values.tenant }} \
              --namespace {{ $.Values.namespace }} \
              --name {{ $name }} \
              --inputs {{ $func.input }} \
              {{- if $func.outputs }}
              {{- $outputs := $func.outputs | default "" }}
              {{- if kindIs "slice" $outputs -}}
              --output {{ join "," $outputs }} \
              {{- else }}
              --output {{ $outputs }} \
              {{- end -}}
              {{- end }}
              {{- if $func.jar }}
              --jar {{ $func.jar }} \
              {{- else if $func.image }}
              --archive {{ $func.image }} \
              {{- end }}
              --class-name {{ $func.className }};
            echo "Function {{ $name }} registered.";
            {{- end }}

            {{- range $name, $conn := .Values.connectors }}
            echo "Registering connector: {{ $name }}";
            {{- if $conn.source }}
            pulsar-admin sources create \
              --tenant {{ $.Values.tenant }} \
              --namespace {{ $.Values.namespace }} \
              --name {{ $name }} \
              {{- if $conn.isCustom }}
                {{- if $conn.archive }}
              --archive {{ $conn.archive }} \
                {{- else if $conn.image }}
              --archive {{ $conn.image }} \
                {{- end }}
              {{- else }}
                {{- if $conn.type }}
              --source-type {{ $conn.type }} \
                {{- end }}
              {{- end }}
              {{- if $conn.topic }}
              --topic-name {{ $conn.topic }} \
              {{- end }}
              --source-config '{{ $conn.config | toJson }}';
            echo "Connector {{ $name }} registered.";
            {{- else if $conn.sink }}
            # Placeholder for sink creation if needed in the future
            # pulsar-admin sinks create ...
            echo "Sink connector {{ $name }} registration not fully implemented in this template.";
            {{- end }}
            {{- end }}

            echo "Pipeline registration completed.";
            # Keep the pod running for a bit for logs, or remove if not needed
            # sleep 30
      # Add imagePullSecrets if using private registries
      # imagePullSecrets:
      # - name: my-registry-secret
---
